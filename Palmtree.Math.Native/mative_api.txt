unsigned __int64 _byteswap_uint64(_In_ unsigned __int64) // バイトオーダー変換(64bit)
unsigned long _byteswap_ulong(_In_ unsigned long) // バイトオーダー変換(32bit)
unsigned short _byteswap_ushort(_In_ unsigned short) // バイトオーダー変換(16bit)

void __movsb(unsigned char *, unsigned char const *, size_t) // メモリ移動(8bit)
void __movsw(unsigned short *, unsigned short const *, size_t) // メモリ移動(16bit)
void __movsd(unsigned long *, unsigned long const *, size_t) // メモリ移動(32bit)

void __stosb(unsigned char *, unsigned char, size_t) // メモリ設定(8bit)
void __stosw(unsigned short *, unsigned short, size_t) // メモリ設定(16bit)
void __stosd(unsigned long *, unsigned long, size_t) // メモリ設定(32bit)

unsigned char _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *) // 8ビット符号なし整数のキャリー付加算
unsigned char _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *) // 16ビット符号なし整数のキャリー付加算
unsigned char _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *) // 32ビット符号なし整数のキャリー付加算

unsigned char _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *) // 8ビット符号なし整数のボロー付減算
unsigned char _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *) // 8ビット符号なし整数のボロー付減算
unsigned char _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *) // 8ビット符号なし整数のボロー付減算

__int64 __emul(int, int) // 符号付乗算(32bit * 32bit => 64bit)
unsigned __int64 __emulu(unsigned int, unsigned int) // 符号なし乗算(32bit * 32bit => 64bit)

unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask) // LSBからMSBに向かってビット1を検索する
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask) // MSBからLSBに向かってビット1を検索する

unsigned char _rotl8(unsigned char _Value, unsigned char _Shift) // 8ビット整数の左ローテート
unsigned short _rotl16(unsigned short _Value, unsigned char _Shift) // 16ビット整数の左ローテート
unsigned int _rotl(_In_ unsigned int _Value, _In_ int _Shift) // 32ビット整数の左ローテート
unsigned __int64 _rotl64(_In_ unsigned __int64 _Value, _In_ int _Shift) // 64ビット整数の左ローテート

unsigned char _rotr8(unsigned char _Value, unsigned char _Shift) // 8ビット整数の左ローテート
unsigned short _rotr16(unsigned short _Value, unsigned char _Shift) // 16ビット整数の左ローテート
unsigned int _rotr(_In_ unsigned int _Value, _In_ int _Shift) // ビット整数の右ローテート
unsigned __int64 _rotr64(_In_ unsigned __int64 _Value, _In_ int _Shift) // 64ビット整数の右ローテート

unsigned long _lrotl(_In_ unsigned long, _In_ int) // 32ビット整数の左ローテート

unsigned long _lrotr(_In_ unsigned long, _In_ int) // 32ビット整数の右ローテート

__int64 __ll_rshift(__int64, int) // 符号付64bit整数の右シフト
unsigned __int64 __ull_rshift(unsigned __int64, int) // 符号なし64bit整数の右シフト
unsigned __int64 __ll_lshift(unsigned __int64, int) // 符号付64bit整数の左シフト

unsigned char _bittest(long const *, long) // 32ビット整数のビット検査
unsigned char _bittestandset(long *, long) // 32ビット整数のビット検査およびセット
unsigned char _bittestandreset(long *, long) // 32ビット整数のビット検査およびリセット
unsigned char _bittestandcomplement(long *, long) // 32ビット整数のビット検査および反転

unsigned short __lzcnt16(unsigned short) // 16ビット整数で、MSBを含む連続したビット0の数を数える
unsigned int __lzcnt(unsigned int) // 32ビット整数で、MSBを含む連続したビット0の数を数える

unsigned short __popcnt16(unsigned short) // 16ビット整数で、1であるビットの数を数える
unsigned int __popcnt(unsigned int) // 32ビット整数で、1であるビットの数を数える

char _InterlockedAnd8(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなAND演算
short _InterlockedAnd16(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなAND演算
long _InterlockedAnd(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなAND演算

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand) // 8ビット整数のアトミックな比較および交換
short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand) // 16ビット整数のアトミックな比較および交換
long _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand) // 32ビット整数のアトミックな比較および交換
__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand) // 64ビット整数のアトミックな比較および交換

short _InterlockedDecrement16(short volatile * _Addend) // 16ビット整数のアトミックなデクリメント
long _InterlockedDecrement(long volatile * _Addend) // 32ビット整数のアトミックなデクリメント

char _InterlockedExchange8(char volatile * _Target, char _Value) // 8ビット整数のアトミックな交換
short _InterlockedExchange16(short volatile * _Target, short _Value) // 16ビット整数のアトミックな交換
long _InterlockedExchange(long volatile * _Target, long _Value) // 32ビット整数のアトミックな交換

char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value) // 8ビット整数のアトミックな交換および加算
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value) // 16ビット整数のアトミックな交換および加算
long _InterlockedExchangeAdd(long volatile * _Addend, long _Value) // 32ビット整数のアトミックな交換および加算

short _InterlockedIncrement16(short volatile * _Addend) // 16ビット整数のアトミックなインクリメント
long _InterlockedIncrement(long volatile * _Addend) // 32ビット整数のアトミックなインクリメント

char _InterlockedOr8(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなOR演算
short _InterlockedOr16(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなOR演算
long _InterlockedOr(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなOR演算

char _InterlockedXor8(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなXOR演算
short _InterlockedXor16(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなXOR演算
long _InterlockedXor(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなXOR演算

unsigned char _interlockedbittestandset(long volatile *, long) // 32ビット整数のアトミックなビット検査およびセット
unsigned char _interlockedbittestandreset(long volatile *, long) // 32ビット整数のアトミックなビット検査およびリセット

// 以降、x64のみ

void __movsq(unsigned long long *, unsigned long long const *, size_t) // メモリ移動(64bit)
void __stosq(unsigned __int64 *, unsigned __int64, size_t) // メモリ設定(64bit)

unsigned char _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *) // 64ビット符号なし整数のキャリー付加算
unsigned char _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *) // 64ビット符号なし整数のボロー付減算

__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct) // 符号付乗算(64bit * 64bit => 128bit)
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct) // 符号なし乗算(64bit * 64bit => 128bit)

unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask) // LSBからMSBに向かってビット1を検索する
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask) // MSBからLSBに向かってビット1を検索する

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift) // 符号なし128bit整数の右シフト
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift) // 符号なし128bit整数の左シフト

unsigned __int64 __lzcnt64(unsigned __int64) // 64ビット整数で、MSBを含む連続したビット0の数を数える
unsigned __int64 __popcnt64(unsigned __int64) // 64ビット整数で、1であるビットの数を数える

char _InterlockedAnd8_np(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなAND演算(プリフェッチなし)
short _InterlockedAnd16_np(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなAND演算(プリフェッチなし)
long _InterlockedAnd_np(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなAND演算(プリフェッチなし)
__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask) // 64ビット整数のアトミックなAND演算(プリフェッチなし)

short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand) // 16ビット整数のアトミックな比較および交換(プリフェッチなし)
long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand) // 32ビット整数のアトミックな比較および交換(プリフェッチなし)
__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand) // 64ビット整数のアトミックな比較および交換(プリフェッチなし)
unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult) // 128ビット整数のアトミックな比較および交換(プリフェッチなし)

char _InterlockedOr8_np(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなOR演算(プリフェッチなし)
short _InterlockedOr16_np(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなOR演算(プリフェッチなし)
long _InterlockedOr_np(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなOR演算(プリフェッチなし)
__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask) // 64ビット整数のアトミックなOR演算(プリフェッチなし)

char _InterlockedXor8_np(char volatile * _Value, char _Mask) // 8ビット整数のアトミックなXOR演算(プリフェッチなし)
short _InterlockedXor16_np(short volatile * _Value, short _Mask) // 16ビット整数のアトミックなXOR演算(プリフェッチなし)
long _InterlockedXor_np(long volatile * _Value, long _Mask) // 32ビット整数のアトミックなXOR演算(プリフェッチなし)
__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask) // 64ビット整数のアトミックなXOR演算(プリフェッチなし)
